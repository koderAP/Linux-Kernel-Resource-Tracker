diff --git a/.gitignore b/.gitignore
index 6839cf84a..de41d8b28 100644
--- a/.gitignore
+++ b/.gitignore
@@ -72,6 +72,7 @@ modules.order
 /modules.builtin.modinfo
 /modules.builtin.ranges
 /modules.nsdeps
+/TESTS
 
 #
 # RPM spec file (make rpm-pkg)
diff --git a/Kbuild b/Kbuild
index 464b34a08..2493afe76 100644
--- a/Kbuild
+++ b/Kbuild
@@ -96,4 +96,5 @@ obj-y			+= sound/
 obj-$(CONFIG_SAMPLES)	+= samples/
 obj-$(CONFIG_NET)	+= net/
 obj-y			+= virt/
+obj-y			+= resource_tracker/
 obj-y			+= $(ARCH_DRIVERS)
diff --git a/arch/arm64/kernel/sys.c b/arch/arm64/kernel/sys.c
index f08408b6e..7455b6e23 100644
--- a/arch/arm64/kernel/sys.c
+++ b/arch/arm64/kernel/sys.c
@@ -17,6 +17,11 @@
 
 #include <asm/cpufeature.h>
 #include <asm/syscall.h>
+#include <linux/resource_tracker.h>
+#include <asm/mman.h>
+
+#define MAP_PRIVATE		0x02 // copied from noblic/sys.h
+#define MAP_FAILED		((void *)-1)
 
 SYSCALL_DEFINE6(mmap, unsigned long, addr, unsigned long, len,
 		unsigned long, prot, unsigned long, flags,
@@ -25,7 +30,12 @@ SYSCALL_DEFINE6(mmap, unsigned long, addr, unsigned long, len,
 	if (offset_in_page(off) != 0)
 		return -EINVAL;
 
-	return ksys_mmap_pgoff(addr, len, prot, flags, fd, off >> PAGE_SHIFT);
+	long retval =  ksys_mmap_pgoff(addr, len, prot, flags, fd, off >> PAGE_SHIFT);
+
+	if(retval != MAP_FAILED && (flags & MAP_ANONYMOUS) && (flags & MAP_PRIVATE)){
+		update_heap_usage(current->pid, len);
+	}
+	return retval;
 }
 
 SYSCALL_DEFINE1(arm64_personality, unsigned int, personality)
diff --git a/arch/arm64/tools/syscall_32.tbl b/arch/arm64/tools/syscall_32.tbl
index 69a829912..e8329f7c2 100644
--- a/arch/arm64/tools/syscall_32.tbl
+++ b/arch/arm64/tools/syscall_32.tbl
@@ -478,3 +478,8 @@
 464	common	getxattrat			sys_getxattrat
 465	common	listxattrat			sys_listxattrat
 466	common	removexattrat			sys_removexattrat
+467 common  register            sys_register
+468 common  fetch               sys_fetch
+469 common  deregister          sys_deregister
+470 common  resource_cap        sys_resource_cap
+471 common  resource_reset      sys_resource_reset
\ No newline at end of file
diff --git a/changed_files.txt b/changed_files.txt
new file mode 100644
index 000000000..a06440893
--- /dev/null
+++ b/changed_files.txt
@@ -0,0 +1,17 @@
+changed_files.txt
+include/linux/resource_tracker.h
+resource_tracker/Makefile
+resource_tracker/resource_tracker.c
+resource_tracker/resource_tracker_cleaner.c
+resource_tracker/resource_tracker_hooks.c
+resource_tracker/tracker_module.c
+.gitignore
+Kbuild
+arch/arm64/kernel/sys.c
+arch/arm64/tools/syscall_32.tbl
+fs/open.c
+include/linux/sched.h
+include/linux/syscalls.h
+include/uapi/asm-generic/unistd.h
+mm/mmap.c
+scripts/syscall.tbl
diff --git a/fs/open.c b/fs/open.c
index e6911101f..dea9988cf 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -33,6 +33,7 @@
 #include <linux/compat.h>
 #include <linux/mnt_idmapping.h>
 #include <linux/filelock.h>
+#include <linux/resource_tracker.h>
 
 #include "internal.h"
 
@@ -1408,6 +1409,9 @@ static long do_sys_openat2(int dfd, const char __user *filename,
 		}
 	}
 	putname(tmp);
+	if(fd >=0 ){
+		update_openfile_count(current->pid, 1); // all 3 syscalls open, openat, openat2 call this functin
+	}
 	return fd;
 }
 
@@ -1546,6 +1550,7 @@ SYSCALL_DEFINE1(close, unsigned int, fd)
 		return -EBADF;
 
 	retval = filp_flush(file, current->files);
+	if (retval == 0) update_openfile_count(current->pid, -1); 
 
 	/*
 	 * We're returning to user space. Don't bother
diff --git a/include/linux/resource_tracker.h b/include/linux/resource_tracker.h
new file mode 100644
index 000000000..e92b0586c
--- /dev/null
+++ b/include/linux/resource_tracker.h
@@ -0,0 +1,27 @@
+#ifndef RESOURCE_TRACKER_H
+#define RESOURCE_TRACKER_H
+
+#include <linux/list.h>
+#include <linux/spinlock.h>
+#include <linux/types.h>
+
+// Structure to store resource utilization of a process
+struct per_proc_resource {
+    pid_t pid;                 // Process ID
+    unsigned long heapsize;     // Memory allocated via brk() and mmap()
+    unsigned long openfile_count; // Number of open files
+};
+
+// Node structure for the doubly linked list
+struct pid_node {
+    struct per_proc_resource *proc_resource; // Resource utilization details
+    struct list_head next_prev_list;        // Linux kernel's list mechanism
+};
+
+
+void print_tracked_processes(struct seq_file *m);
+void update_heap_usage(pid_t pid, long byte_change);
+void update_openfile_count(pid_t pid, int change);
+void cleanup_monitored_entry(pid_t pid);
+
+#endif 
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 949b53e0a..8e4aedb4b 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -925,6 +925,9 @@ struct task_struct {
 	struct rb_node			pushable_dl_tasks;
 #endif
 
+	unsigned long 			heap_quota;
+	unsigned long 			file_quota;
+	
 	struct mm_struct		*mm;
 	struct mm_struct		*active_mm;
 	struct address_space		*faults_disabled_mapping;
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index c6333204d..ec1e0254c 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -92,6 +92,7 @@ struct xattr_args;
 #include <linux/key.h>
 #include <linux/personality.h>
 #include <trace/syscall.h>
+#include <linux/resource_tracker.h>
 
 #ifdef CONFIG_ARCH_HAS_SYSCALL_WRAPPER
 /*
@@ -1210,6 +1211,13 @@ asmlinkage long sys_ni_syscall(void);
 
 asmlinkage long sys_ni_posix_timers(void);
 
+asmlinkage long sys_register(pid_t pid);
+asmlinkage long sys_fetch(struct per_proc_resource __user *stats, pid_t pid);
+asmlinkage long sys_deregister(pid_t pid);
+asmlinkage long sys_resource_cap(pid_t pid, long heap_quota, long file_quota);
+asmlinkage long sys_resource_reset(pid_t pid);
+
+
 /*
  * Kernel code should not call syscalls (i.e., sys_xyzyyz()) directly.
  * Instead, use one of the functions which work equivalently, such as
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 88dc393c2..d71d22f8e 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -850,8 +850,21 @@ __SYSCALL(__NR_listxattrat, sys_listxattrat)
 #define __NR_removexattrat 466
 __SYSCALL(__NR_removexattrat, sys_removexattrat)
 
+
+/* Resource Tracker syscalls */
+#define __NR_sys_register        467
+__SYSCALL(__NR_sys_register, sys_register)
+#define __NR_sys_fetch           468
+__SYSCALL(__NR_sys_fetch, sys_fetch)
+#define __NR_sys_deregister      469
+__SYSCALL(__NR_sys_deregister, sys_deregister)
+#define __NR_sys_resource_cap    470
+__SYSCALL(__NR_sys_resource_cap, sys_resource_cap)
+#define __NR_sys_resource_reset  471
+__SYSCALL(__NR_sys_resource_reset, sys_resource_reset)
+
 #undef __NR_syscalls
-#define __NR_syscalls 467
+#define __NR_syscalls 472
 
 /*
  * 32 bit systems traditionally used different
diff --git a/mm/mmap.c b/mm/mmap.c
index aec208f90..237941b4d 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -53,6 +53,7 @@
 #include <asm/cacheflush.h>
 #include <asm/tlb.h>
 #include <asm/mmu_context.h>
+#include <linux/resource_tracker.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/mmap.h>
@@ -113,6 +114,7 @@ static int check_brk_limits(unsigned long addr, unsigned long len)
 }
 static int do_brk_flags(struct vma_iterator *vmi, struct vm_area_struct *brkvma,
 		unsigned long addr, unsigned long request, unsigned long flags);
+
 SYSCALL_DEFINE1(brk, unsigned long, brk)
 {
 	unsigned long newbrk, oldbrk, origbrk;
@@ -177,7 +179,7 @@ SYSCALL_DEFINE1(brk, unsigned long, brk)
 		if (do_vmi_align_munmap(&vmi, brkvma, mm, newbrk, oldbrk, &uf,
 					/* unlock = */ true))
 			goto out;
-
+		update_heap_usage(current->pid, newbrk - oldbrk);
 		goto success_unlocked;
 	}
 
@@ -199,6 +201,7 @@ SYSCALL_DEFINE1(brk, unsigned long, brk)
 		goto out;
 
 	mm->brk = brk;
+	update_heap_usage(current->pid, newbrk - oldbrk);
 	if (mm->def_flags & VM_LOCKED)
 		populate = true;
 
diff --git a/resource_tracker/Makefile b/resource_tracker/Makefile
new file mode 100644
index 000000000..8f696c49d
--- /dev/null
+++ b/resource_tracker/Makefile
@@ -0,0 +1,30 @@
+obj-m := tracker_module.o 
+obj-m += resource_tracker_cleaner.o
+obj-y := resource_tracker.o 
+obj-y += resource_tracker_hooks.o
+
+KDIR := /lib/modules/$(shell uname -r)/build
+PWD := $(shell pwd)
+
+all:
+	$(MAKE) -C $(KDIR) M=$(PWD) modules
+
+
+clean:
+	$(MAKE) -C $(KDIR) M=$(PWD) clean
+
+modules:
+	@if lsmod | grep -q tracker_module; then \
+		echo "Unloading tracker_module..."; \
+		sudo rmmod tracker_module; \
+	fi
+	@if lsmod | grep -q resource_tracker_cleaner; then \
+		echo "Unloading resource_tracker_cleaner..."; \
+		sudo rmmod resource_tracker_cleaner; \
+	fi
+
+	$(MAKE) -C $(KDIR) M=$(PWD) tracker_module.ko
+	$(MAKE) -C $(KDIR) M=$(PWD) resource_tracker_cleaner.ko
+
+	sudo insmod tracker_module.ko
+	sudo insmod resource_tracker_cleaner.ko
diff --git a/resource_tracker/resource_tracker.c b/resource_tracker/resource_tracker.c
new file mode 100644
index 000000000..5d0f3b0b3
--- /dev/null
+++ b/resource_tracker/resource_tracker.c
@@ -0,0 +1,293 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+#include <linux/spinlock.h>
+#include <linux/sched.h>
+#include <linux/uaccess.h>
+#include <linux/resource_tracker.h>
+#include <linux/rcupdate.h>
+
+/* Global list for monitored processes */
+LIST_HEAD(monitored_list);
+DEFINE_SPINLOCK(monitored_lock);
+
+EXPORT_SYMBOL(monitored_list);
+EXPORT_SYMBOL(monitored_lock);
+
+
+/* register - Register a process for monitoring */
+SYSCALL_DEFINE1(register, pid_t, pid)
+{
+    struct pid_node *node;
+    struct task_struct *task;
+    
+
+    if (pid < 1)
+        return -22;
+
+    rcu_read_lock();
+    task = find_task_by_vpid(pid);
+    if (task)
+        get_task_struct(task);  // Increase reference count before unlocking RCU, this makes sture that pointer is not freed anytime before we are done registering the process
+    rcu_read_unlock();
+    if (!task)
+        return -3;
+
+    spin_lock(&monitored_lock);
+    list_for_each_entry(node, &monitored_list, next_prev_list) {
+        if (node->proc_resource->pid == pid) {
+            spin_unlock(&monitored_lock);
+            return -23;
+        }
+    }
+    
+
+    node = kmalloc(sizeof(*node), GFP_KERNEL);
+    if (!node) {
+        spin_unlock(&monitored_lock);
+        return -ENOMEM;
+    }
+    node->proc_resource = kmalloc(sizeof(struct per_proc_resource), GFP_KERNEL);
+    if (!node->proc_resource) {
+        kfree(node);
+        spin_unlock(&monitored_lock);
+        return -ENOMEM;
+    }
+    
+    task_lock(task);
+    task->heap_quota = -1;
+    task->file_quota = -1;
+    task_unlock(task);
+    node->proc_resource->pid = pid;
+    node->proc_resource->heapsize = 0;
+    node->proc_resource->openfile_count = 0;
+
+    rcu_read_lock();  
+    if (task->exit_state & EXIT_ZOMBIE || task->exit_state & EXIT_DEAD) {
+        task_unlock(task);
+        kfree(node->proc_resource);
+        kfree(node);
+        spin_unlock(&monitored_lock);
+        return -3;
+    }
+    rcu_read_unlock();
+
+    list_add_tail(&node->next_prev_list, &monitored_list);
+    printk(KERN_INFO "Registered PID %d for monitoring\n", pid);
+
+    put_task_struct(task); // Nomore needed, so decrease reference count
+    spin_unlock(&monitored_lock);
+
+    return 0;
+}
+
+/* fetch - Return current resource usage to user space */
+SYSCALL_DEFINE2(fetch, struct per_proc_resource __user *, stats, pid_t, pid)
+{
+    struct pid_node *node;
+    struct per_proc_resource kercopy;
+    
+    
+    int found = 0;
+
+    if (pid < 1)
+        return -22;
+
+    spin_lock(&monitored_lock);
+    list_for_each_entry(node, &monitored_list, next_prev_list) {
+        if (node->proc_resource->pid == pid) {
+            found = 1;
+            break;
+        }
+    }
+    spin_unlock(&monitored_lock);
+
+    if (!found)
+        return -22;
+
+    printk(KERN_INFO "Fetching resource usage for PID %d\n", pid);
+
+    kercopy = *node->proc_resource;
+    kercopy.heapsize = kercopy.heapsize /(1024*1024);
+    if (copy_to_user(stats, &kercopy, sizeof(struct per_proc_resource)))
+        return -EFAULT;
+
+    return 0;
+}
+
+/* deregister - Remove a process from the monitored list */
+SYSCALL_DEFINE1(deregister, pid_t, pid)
+{
+    struct pid_node *node, *tmp;
+    
+    int found = 0;
+
+    struct task_struct *task;
+
+    /* to Verify if process exists */
+    rcu_read_lock();
+    task = find_task_by_vpid(pid);
+    if(task)
+        get_task_struct(task);
+    rcu_read_unlock();
+    if(!task)
+        return -3; // Process does not exist ==> Cannot deregister as cannot be in the list too
+
+    if (pid < 1)
+        return -22;
+
+    spin_lock(&monitored_lock);
+    list_for_each_entry_safe(node, tmp, &monitored_list, next_prev_list) {
+        if (node->proc_resource->pid == pid) {
+            list_del(&node->next_prev_list);
+            kfree(node->proc_resource);
+            kfree(node);
+            found = 1;
+            printk(KERN_INFO "Deregistered PID %d\n", pid);
+            if(task){
+                task_lock(task);
+                task->heap_quota = -1;
+                task->file_quota = -1;
+                task_unlock(task);
+            }
+            break;
+        }
+    }
+    spin_unlock(&monitored_lock);
+
+    if(task)put_task_struct(task);
+
+    if (!found)
+        return -3;
+    return 0;
+
+
+}
+
+/* resource_cap - Set resource quotas for a process.*/
+
+
+SYSCALL_DEFINE3(resource_cap, pid_t, pid, long, heap_quota, long, file_quota)
+{
+    struct task_struct *task;
+    struct pid_node *node = NULL;
+    
+
+    if (pid < 1)
+        return -22;
+
+    rcu_read_lock();
+    task = find_task_by_vpid(pid);
+    if (task)
+        get_task_struct(task);
+    rcu_read_unlock();
+    if (!task)
+        return -3;
+
+    
+    int found = 0; 
+    spin_lock(&monitored_lock);
+    list_for_each_entry(node, &monitored_list, next_prev_list) {
+        if (node->proc_resource->pid == pid){
+            found = 1;
+            break;
+        }
+    }
+    if (!found){
+        spin_unlock(&monitored_lock);
+        return -22;
+    }
+    spin_unlock(&monitored_lock);
+
+    
+
+    rcu_read_lock();
+    if (task->heap_quota != -1 || task->file_quota != -1){
+        rcu_read_unlock();
+        return -23;
+    }
+    rcu_read_unlock();
+
+    if(heap_quota < -1 || file_quota < -1){
+        put_task_struct(task); 
+        return -24; // Ccccannot set negative quota
+    }
+
+    printk(KERN_INFO "Setting resource quotas for PID %d\n", pid);
+
+    task_lock(task);
+    task->heap_quota = heap_quota;
+    task->file_quota = file_quota;
+    task_unlock(task);
+
+
+    update_heap_usage(pid, 0);
+    update_openfile_count(pid, 0);
+    put_task_struct(task); 
+    return 0;
+}
+
+/* resource_reset - Reset resource quotas to -1 (no limit) */
+SYSCALL_DEFINE1(resource_reset, pid_t, pid)
+{
+    struct task_struct *task;
+    struct pid_node *node = NULL;
+    
+
+    if (pid < 1)
+        return -22;
+
+    rcu_read_lock();
+    task = find_task_by_vpid(pid);
+    if (task)
+        get_task_struct(task);
+    rcu_read_unlock();
+    if (!task)
+        return -3;
+
+    int found = 0;
+    spin_lock(&monitored_lock);
+    list_for_each_entry(node, &monitored_list, next_prev_list) {
+        if (node->proc_resource->pid == pid){
+                found = 1;
+                break;
+            }
+    }
+    if (!found) {
+        spin_unlock(&monitored_lock);
+        return -22;
+    }
+    spin_unlock(&monitored_lock);
+
+    printk(KERN_INFO "Resetting resource quotas for PID %d\n", pid);
+
+    task_lock(task);
+    task->heap_quota = -1;
+    task->file_quota = -1;
+    task_unlock(task);
+    put_task_struct(task); 
+
+    return 0;
+}
+
+/* Cleanup function to remove monitored entry (used for process termination) */
+void cleanup_monitored_entry(pid_t pid)
+{
+    struct pid_node *node, *tmp;
+    
+
+    spin_lock(&monitored_lock);
+    list_for_each_entry_safe(node, tmp, &monitored_list, next_prev_list) {
+        if (node->proc_resource->pid == pid) {
+            list_del(&node->next_prev_list);
+            kfree(node->proc_resource);
+            kfree(node);
+            pr_info("Cleaned up monitored entry for PID %d\n", pid);
+            break;
+        }
+    }
+    spin_unlock(&monitored_lock);
+}
+
+EXPORT_SYMBOL(cleanup_monitored_entry);
\ No newline at end of file
diff --git a/resource_tracker/resource_tracker_cleaner.c b/resource_tracker/resource_tracker_cleaner.c
new file mode 100644
index 000000000..f67535f66
--- /dev/null
+++ b/resource_tracker/resource_tracker_cleaner.c
@@ -0,0 +1,43 @@
+#include <linux/module.h>
+#include <linux/kprobes.h>
+#include <linux/spinlock.h>
+#include <linux/resource_tracker.h>
+
+extern void cleanup_monitored_entry(pid_t pid);
+
+static struct kprobe kp = {
+    .symbol_name = "do_exit",
+};
+
+static int handler_pre(struct kprobe *p, struct pt_regs *regs)
+{
+    pid_t exiting_pid = current->pid;
+    cleanup_monitored_entry(exiting_pid);
+    return 0;
+}
+
+static int __init cleanup_kprobe_init(void)
+{
+    int ret;
+    kp.pre_handler = handler_pre;
+    ret = register_kprobe(&kp);
+    if (ret < 0) {
+        pr_err("Failed to register kprobe: %d\n", ret);
+        return ret;
+    }
+    pr_info("Cleanup kprobe registered at %p\n", kp.addr);
+    return 0;
+}
+
+static void __exit cleanup_kprobe_exit(void)
+{
+    unregister_kprobe(&kp);
+    pr_info("Cleanup kprobe unregistered\n");
+}
+
+module_init(cleanup_kprobe_init);
+module_exit(cleanup_kprobe_exit);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Anubhav Pandey");
+MODULE_DESCRIPTION("Automatically clean monitored list on process termination");
+
diff --git a/resource_tracker/resource_tracker_hooks.c b/resource_tracker/resource_tracker_hooks.c
new file mode 100644
index 000000000..79a9b38dd
--- /dev/null
+++ b/resource_tracker/resource_tracker_hooks.c
@@ -0,0 +1,92 @@
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/spinlock.h>
+#include <linux/list.h>
+#include <linux/resource_tracker.h>
+#include <linux/sched/task.h>   
+#include <linux/sched/signal.h> 
+#include <linux/rcupdate.h>     // rcu_read_lock, rcu_read_unlock
+
+
+extern struct list_head monitored_list;
+extern spinlock_t monitored_lock;
+
+void update_heap_usage(pid_t pid, long byte_change)
+{
+    struct pid_node *node;
+    struct task_struct *task;
+
+    spin_lock(&monitored_lock);
+    list_for_each_entry(node, &monitored_list, next_prev_list) {
+        if (node->proc_resource->pid == pid) {
+            if(node->proc_resource->heapsize + byte_change > node->proc_resource->heapsize && byte_change < 0){
+                node->proc_resource->heapsize = 0;
+            }else{
+                node->proc_resource->heapsize += byte_change;
+            }
+
+            printk(KERN_INFO "Heap usage for PID %d: %lu\n", pid,
+                   node->proc_resource->heapsize);
+            spin_unlock(&monitored_lock);
+
+            rcu_read_lock();
+            task = find_task_by_vpid(pid);
+            if (task && task->heap_quota != -1 && node->proc_resource->heapsize >
+                   ((unsigned long) task->heap_quota)&&
+                node->proc_resource->heapsize >
+                   ((unsigned long) task->heap_quota * 1024 * 1024)) {
+
+                printk(KERN_INFO "Heap usage for PID %d: %lu, but limit is %lu, so KILLING it\n", pid,
+                     node->proc_resource->heapsize, task->heap_quota * 1024 * 1024);
+
+                rcu_read_unlock();
+                send_sig(SIGKILL, task, 0);
+                return;
+            }
+            rcu_read_unlock();
+            return;
+        }
+    }
+    spin_unlock(&monitored_lock);
+}
+
+void update_openfile_count(pid_t pid, int change)
+{
+    struct pid_node *node;
+    struct task_struct *task;
+
+    spin_lock(&monitored_lock);
+    list_for_each_entry(node, &monitored_list, next_prev_list) {
+        if (node->proc_resource->pid == pid) {
+            if (node->proc_resource->openfile_count + change > node->proc_resource->openfile_count && change < 0) {
+                node->proc_resource->openfile_count = 0;
+            } 
+            else {
+                node->proc_resource->openfile_count += change;
+            }
+            spin_unlock(&monitored_lock);
+            printk(KERN_INFO "Page usage for PID %d: %lu\n", pid,
+                   node->proc_resource->openfile_count);
+
+            rcu_read_lock();
+            task = find_task_by_vpid(pid);
+            
+            if (task && task->file_quota != -1 &&
+                (node->proc_resource->openfile_count >
+                 (unsigned long) task->file_quota)) {
+                
+                printk(KERN_INFO "Page usage for PID %d: %lu, but limit is %lu, so KILLING it\n", pid,
+                   node->proc_resource->openfile_count, task->file_quota);
+                
+                rcu_read_unlock();
+                send_sig(SIGKILL, task, 0);
+                return;
+
+            }
+            rcu_read_unlock();
+            return;
+        }
+    }
+    spin_unlock(&monitored_lock);
+}
+
diff --git a/resource_tracker/tracker_module.c b/resource_tracker/tracker_module.c
new file mode 100644
index 000000000..30b9d5b5b
--- /dev/null
+++ b/resource_tracker/tracker_module.c
@@ -0,0 +1,167 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/spinlock.h>
+#include <linux/list.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/sched/signal.h>
+#include <linux/rcupdate.h>
+#include <linux/signal.h>
+#include <linux/resource_tracker.h>
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Anubhav Pandey");
+MODULE_DESCRIPTION("A module to track process resource usage with a /proc interface");
+
+extern struct list_head monitored_list;
+extern spinlock_t monitored_lock;
+
+static char my_task_state_to_char(struct task_struct *task)
+{
+    if (!task)
+        return 'X';  // Unknown state (or Dead)
+
+    if (task_is_running(task))
+        return 'R';  // Running or Runnable
+
+    switch (task_state_index(task)) {
+        case TASK_INTERRUPTIBLE:
+            return 'S';  // Sleeping (interruptible)
+        case TASK_UNINTERRUPTIBLE:
+            return 'D';  // Uninterruptible sleep (usually waiting for I/O)
+        case __TASK_STOPPED:
+            return 'T';  // Stopped (e.g., by a signal like SIGSTOP)
+        case __TASK_TRACED:
+            return 't';  // Traced (being debugged)
+        case EXIT_ZOMBIE:
+            return 'Z';  // Zombie (terminated but not reaped by parent)
+        case EXIT_DEAD:
+            return 'X';  // Dead (should not exist)
+        default:
+            return '?';  // Unknown state
+    }
+}
+
+
+static int my_get_nr_threads(struct task_struct *task)
+{
+    if (task && task->signal)
+         return task->signal->nr_threads;
+    return 1;
+}
+
+/*
+ * print_tracked_processes - Print a summary table of tracked processes.
+   This function is called when the /proc/tracker_status file is read. Idea was to print the tracked processes in a tabular format, similar to top or htop.
+ */
+#define CENTER_ALIGN(buf, width, text) \
+    snprintf(buf, sizeof(buf), "%*s%s%*s", \
+             ((width - (int)strlen(text)) / 2), "", \
+             text, \
+             ((width - (int)strlen(text)) + 1) / 2, "") // For center alignment
+
+void print_tracked_processes(struct seq_file *m)
+{
+    struct pid_node *node;
+    struct task_struct *task;
+    char state_char;
+
+    seq_printf(m, "%-6s    %-16s%-4s   %-12s  %-12s    %-8s  %-8s    %s\n", 
+               "PID", "COMMAND", "STAT", "HEAP(MB)", "HEAP_CAP(MB)", "FILES", "FILE_CAP", "THREADS");
+
+    spin_lock(&monitored_lock);
+    list_for_each_entry(node, &monitored_list, next_prev_list) {
+        rcu_read_lock();
+        task = pid_task(find_vpid(node->proc_resource->pid), PIDTYPE_PID);
+        if (!task) {
+            rcu_read_unlock();
+            continue;
+        }
+        state_char = my_task_state_to_char(task);
+        char heap_quota_buf[21], file_quota_buf[21];
+
+        if (task->heap_quota == -1)
+            snprintf(heap_quota_buf, sizeof(heap_quota_buf), "U");
+        else
+            snprintf(heap_quota_buf, sizeof(heap_quota_buf), "%lu", task->heap_quota);
+
+        if (task->file_quota == -1)
+            snprintf(file_quota_buf, sizeof(file_quota_buf), "U");
+        else
+            snprintf(file_quota_buf, sizeof(file_quota_buf), "%lu", task->file_quota);
+
+        char pid_buf[8], comm_buf[18], stat_buf[6], heap_buf[14], heap_cap_buf[14];
+        char files_buf[10], file_cap_buf[10], threads_buf[6];
+
+        char pid_str[10], heap_str[14], files_str[10], threads_str[6], stat_str[2];
+
+        snprintf(pid_str, sizeof(pid_str), "%d", task->pid);
+        snprintf(heap_str, sizeof(heap_str), "%lu", node->proc_resource->heapsize / (1024 * 1024));
+        snprintf(files_str, sizeof(files_str), "%lu", node->proc_resource->openfile_count);
+        snprintf(threads_str, sizeof(threads_str), "%d", my_get_nr_threads(task));
+        snprintf(stat_str, sizeof(stat_str), "%c", state_char);  // Convert char to string
+
+        CENTER_ALIGN(pid_buf, 6, pid_str);
+        CENTER_ALIGN(comm_buf, 16, task->comm);
+        CENTER_ALIGN(stat_buf, 4, stat_str);
+        CENTER_ALIGN(heap_buf, 12, heap_str);
+        CENTER_ALIGN(heap_cap_buf, 12, heap_quota_buf);
+        CENTER_ALIGN(files_buf, 8, files_str);
+        CENTER_ALIGN(file_cap_buf, 8, file_quota_buf);
+        CENTER_ALIGN(threads_buf, 6, threads_str);
+
+        seq_printf(m, "%s %s   %s  %s  %s    %s  %s     %s\n",
+            pid_buf, comm_buf, stat_buf, heap_buf, heap_cap_buf, files_buf, file_cap_buf, threads_buf);
+
+        rcu_read_unlock();
+    }
+    spin_unlock(&monitored_lock);
+}
+
+static int tracker_proc_show(struct seq_file *m, void *v)
+{
+    print_tracked_processes(m);
+    return 0;
+}
+
+static int tracker_proc_open(struct inode *inode, struct file *file)
+{
+    return single_open(file, tracker_proc_show, NULL);
+}
+
+static const struct proc_ops tracker_proc_ops = {
+    .proc_open    = tracker_proc_open,
+    .proc_read    = seq_read,
+    .proc_lseek   = seq_lseek,
+    .proc_release = single_release,
+};
+
+/* Module initialization: create the proc entry and print instructions */
+static int __init tracker_init(void)
+{
+    struct proc_dir_entry *entry;
+
+    entry = proc_create("tracker_status", 0, NULL, &tracker_proc_ops);
+    if (!entry) {
+        printk(KERN_ERR "Failed to create /proc/tracker_status\n");
+        return -ENOMEM;
+    }
+    printk(KERN_INFO "Tracker module loaded.\n");
+    printk(KERN_INFO "To view tracked processes, run: cat /proc/tracker_status\n");
+    printk(KERN_INFO "Note: Add processes to the monitoring list manually as needed.\n");
+    return 0;
+}
+
+/* Module exit: remove the proc entry and free tracked list memory */
+static void __exit tracker_exit(void)
+{
+    remove_proc_entry("tracker_status", NULL);
+    // We don't need to free the list, as it the module only reads from it.
+    printk(KERN_INFO "Tracker module unloaded.\n");
+}
+
+module_init(tracker_init);
+module_exit(tracker_exit);
diff --git a/scripts/syscall.tbl b/scripts/syscall.tbl
index ebbdb3c42..5ba8b07b7 100644
--- a/scripts/syscall.tbl
+++ b/scripts/syscall.tbl
@@ -407,3 +407,8 @@
 464	common	getxattrat			sys_getxattrat
 465	common	listxattrat			sys_listxattrat
 466	common	removexattrat			sys_removexattrat
+467 common  register            sys_register
+468 common  fetch               sys_fetch
+469 common  deregister          sys_deregister
+470 common  resource_cap        sys_resource_cap
+471 common  resource_reset      sys_resource_reset
\ No newline at end of file
